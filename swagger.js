const swaggerAutogen = require('swagger-autogen')();

const doc = {
  info: {
    version: '1.0.0',
    title: '개미들의 곡소리',
    description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.',
  },
  host: '13.124.99.118',
  basePath: '/',
  schemes: ['http', 'https'],
  consumes: ['application/json'],
  produces: ['application/json'],
  tags: [
    {
      name: 'User',
      description: 'Endpoints',
    },
  ],
  securityDefinitions: {
    Bearer: {
      type: 'apiKey',
      in: 'header', // can be "header", "query" or "cookie"
      name: 'Authorization', // name of the header, query parameter or cookie
      description: 'token',
    },
  },
  definitions: {
    users: {
      type: 'object',
      properties: {
        Id: {
          type: 'Number',
        },
        userId: {
          type: 'String',
        },
        nickname: {
          type: 'String',
        },
        pw: {
          type: 'String',
        },
        ageGroup: {
          type: 'Number',
        },
        exp: {
          type: 'Number',
        },
      },
    },
    either: {
      type: 'object',
      properties: {
        eitherId: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        title: {
          type: 'String',
        },
        contentA: {
          type: 'String',
        },
        contentB: {
          type: 'String',
        },
        date: {
          type: 'String',
        },
        completed: {
          type: 'Boolean',
        },
        edited: {
          type: 'Boolean',
        },
        editedDate: {
          editedDate: 'String',
        },
      },
    },
    multi: {
      type: 'object',
      properties: {
        multiId: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        title: {
          type: 'String',
        },
        description: {
          type: 'String',
        },
        contentA: {
          type: 'String',
        },
        contentB: {
          type: 'String',
        },
        contentC: {
          type: 'String',
        },
        contentD: {
          type: 'String',
        },
        contentE: {
          type: 'String',
        },
        date: {
          type: 'String',
        },
        completed: {
          type: 'Boolean',
        },
        edited: {
          type: 'Boolean',
        },
        editedDate: {
          editedDate: 'String',
        },
      },
    },
    comments: {
      type: 'object',
      properties: {
        id: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        multi: {
          type: 'Number',
        },
        comment: {
          type: 'String',
        },
        date: {
          type: 'String',
        },
        edited: {
          type: 'Boolean',
        },
        editedDate: {
          type: 'String',
        },
      },
    },
    childComments: {
      type: 'object',
      properties: {
        id: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        multi: {
          type: 'Number',
        },
        parentComment: {
          type: 'Number',
        },
        comment: {
          type: 'String',
        },
        date: {
          type: 'String',
        },
        edited: {
          type: 'Boolean',
        },
        editedDate: {
          type: 'String',
        },
      },
    },
    commentLikes: {
      type: 'object',
      properties: {
        id: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        childComment: {
          type: 'Number',
        },
        comment: {
          type: 'Number',
        },
      },
    },
    likes: {
      type: 'object',
      properties: {
        id: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        either: {
          type: 'Number',
        },
        multi: {
          type: 'Number',
        },
      },
    },
    votes: {
      type: 'object',
      properties: {
        id: {
          type: 'Number',
        },
        user: {
          type: 'Number',
        },
        either: {
          type: 'Number',
        },
        multi: {
          type: 'Number',
        },
        vote: {
          type: 'String',
        },
      },
    },
  },
};

const outputFile = './swagger_output.json';
const endpointsFiles = ['./routers/*.js', './app.js'];

swaggerAutogen(outputFile, endpointsFiles, doc);
